#include <knightos/display.h>
#include <knightos/system.h>
#include <knightos/keys.h>
#include <corelib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <ctype.h>

char *strcat(char *restrict dst, const char *restrict src) {
	const size_t destination_length= strlen(dst);
	const size_t src_length = strlen(src);
	memcpy(dst+destination_length, src, src_length+1);
	return dst;
}

double strToDouble(char* string){
	double result= 0.0;
	int len = sizeof(string)-1;
	int dotpos = 0;
	int n;
	for(n = 0; n < len; n++){
		if (string[n] == '.'){
			dotpos = len - n  - 1;
		}else{
			result = result * 10.0 + (string[n]-'0');
		}
	}
	while(dotpos--){
		result /= 10.0;
	}
	return result;
}

char *doubleToStr(double d, char *result){
	//converts a double to a string.
	//result is stored in the result parameter, or returned as a newly generated string
	//when result == NULL
	double i = d;
	int length = 1;
	char currentChar;
	//char *result = malloc(21);
	char *copy;
	char *single = "0";

	copy = malloc(21);

	if(result == NULL){
		result = malloc(21);
	}
	strcpy(result,"");
	//add a minus if the number is negative
	if(d < 0){
		strcpy(result,"-");
		length++;
	}

	//integer part
	do{
		//get character
		currentChar = ((int)fmod(i,10.0))+'0';
		//add to start of the string
		strcpy(result,copy);
		//strncopy(single,&currentChar,1);
		single[0] = currentChar;//
		strcpy(single,result);
		strcat(result,copy);
		i /= 10.0;
		length++;
	}while(i != 0.0 && length<20);

	//get rid of the integer part
	d -= (double)((int)d);
	if(d == 0.0){
		//no decimal part, so we're done
		free(copy);
		return result;
	}
	//add a . before adding the decimal part
	strcat(result,".");
	length++;

	//decimal part
	while((d != 0.0) && (length<20)){
		//get character
		d *= 10.0;
		//add to end of string
		currentChar = ((int)fmod(i,10.0))+'0';
		d -= (double)((int)d);
		//strncopy(single,&currentChar,1);
		single[0] = currentChar;//
		strcat(result,single);
	}
	//free(copy);
	return result;
}
